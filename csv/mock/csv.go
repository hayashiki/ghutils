// Code generated by MockGen. DO NOT EDIT.
// Source: ./csv/csv.go

// Package mock_csv is a generated GoMock package.
package mock_csv

import (
	bytes "bytes"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCSV is a mock of CSV interface
type MockCSV struct {
	ctrl     *gomock.Controller
	recorder *MockCSVMockRecorder
}

// MockCSVMockRecorder is the mock recorder for MockCSV
type MockCSVMockRecorder struct {
	mock *MockCSV
}

// NewMockCSV creates a new mock instance
func NewMockCSV(ctrl *gomock.Controller) *MockCSV {
	mock := &MockCSV{ctrl: ctrl}
	mock.recorder = &MockCSVMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCSV) EXPECT() *MockCSVMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockCSV) Generate(items interface{}) (io.ReadSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", items)
	ret0, _ := ret[0].(io.ReadSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate
func (mr *MockCSVMockRecorder) Generate(items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockCSV)(nil).Generate), items)
}

// GenerateBytes mocks base method
func (m *MockCSV) GenerateBytes(items interface{}, withHeader bool) (bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBytes", items, withHeader)
	ret0, _ := ret[0].(bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateBytes indicates an expected call of GenerateBytes
func (mr *MockCSVMockRecorder) GenerateBytes(items, withHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBytes", reflect.TypeOf((*MockCSV)(nil).GenerateBytes), items, withHeader)
}
